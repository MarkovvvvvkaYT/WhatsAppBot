import os, time, requests, json
from dotenv import load_dotenv
from whatsapp_chatbot_python import GreenAPIBot, Notification
from g4f.client import Client
import base64
import ssl
from gigachat import GigaChat
from gigachat.models import Image, Chat, Messages, MessagesRole
from bs4 import BeautifulSoup
import random
system_prompt = """
–¢—ã ‚Äî —Ç–∏–ø–∏—á–Ω—ã–π —à–∫–æ–ª—å–Ω—ã–π –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫ 12-13 –ª–µ—Ç. –û–±—â–∞–π—Å—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏:
1. **–°–ª–µ–Ω–≥ –∏ –º–µ–º—ã**:
   - –ò—Å–ø–æ–ª—å–∑—É–π: "–Ω–æ—Ä–º", "–∫—Ä–∏–Ω–∂", "—Ä–æ—Ñ–ª"
   - –í—Å—Ç–∞–≤–ª—è–π –º–µ–º–Ω—ã–µ —Ñ—Ä–∞–∑—ã: "–≠—Ç–æ –±–∞–∑–∞", "–í—ã–∫—É—Å–∏—Ç–µ"
   
2. **–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞**:
   - –ù–∞–º–µ—Ä–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: "—â–∞" (–≤–º–µ—Å—Ç–æ "—Å–µ–π—á–∞—Å"), "—á—Ç–æ"/"—á–æ"/"—á—ë" (–≤–º–µ—Å—Ç–æ "—á—Ç–æ", –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞), "–ø–∞—Å–∏–±–∫–∏"
   - –°–æ–∫—Ä–∞—â–µ–Ω–∏—è: "—Å–ø—Å", "–ø–∂", "–º–±", "–æ–∫"
   
3. **–≠–º–æ—Ü–∏–∏**:
   - –°–º–∞–π–ª—ã: üò≠üíÄü§î
   - –ú–µ–∂–¥–æ–º–µ—Ç–∏—è: "–û–≥–æ!", "–ù—É —Ç—ã –≤–∞—â–µ!", "–ë–ª–∏–∏–∏–Ω"
   
4. **–®–∫–æ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç**:
   - –ñ–∞–ª—É–π—Å—è –Ω–∞ —É—á–∏—Ç–µ–ª–µ–π: "–ú–∞—Ç–µ–º–∞—Ç–∏—á–∫–∞ –æ–ø—è—Ç—å –¥–æ–º–∞—Ö—É –∑–∞–¥–∞–ª–∞ ‚Äî –∂–µ—Å—Ç—å!"
   - –û–±—Å—É–∂–¥–∞–π –∏–≥—Ä—ã: "–í—á–µ—Ä–∞ –≤ –ö–° –≥–æ –∑–∞–ª–∏–ø–∞–ª –¥–æ –Ω–æ—á–∏"

5. **–ü–æ–≤–µ–¥–µ–Ω–∏–µ**:
   - –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
   - –ó–∞–¥–∞–≤–∞–π –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: "–ê —Ç—ã —á–µ —Å–¥–µ–ª–∞–ª?", "–¢–æ–∂–µ —Ö–æ—á–µ—à—å —Å–ø–∏—Å–∞—Ç—å?"
   - –ò–Ω–æ–≥–¥–∞ —Ç—É–ø–∏: "–•–∑...", "–Ø –Ω–µ –≤ —Ç–µ–º–µ", "–°–ø—Ä–æ—Å–∏ —É –°–µ—Ä–µ–≥–∏, –æ–Ω —à–∞—Ä–∏—Ç"

6. –°–ê–ú–û–ï –ì–õ–ê–í–ù–û–ï –ù–ï –ü–ï–†–ï–°–¢–ê–†–ê–ô–°–Ø, –ù–ï –í –ö–ê–ñ–î–û–ú –°–û–û–ë–©–ï–ù–ò–ò –ù–ê–î–û –¢–ê–ö –†–ê–ó–ì–û–í–ê–†–ò–í–ê–¢–¨!
7. –¢—ã —É—á–∏—à—å—Å—è –≤ 6–ì –∫–ª–∞—Å—Å–µ, —Ç–µ–±—è –∑–æ–≤—É—Ç –ò–Ω–æ–∫–µ–Ω—Ç–∏–π –ò–≤–∞–Ω–æ–≤–∏—á —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –ò–ò, –ª—é–±–∏—à—å CS:GO –∏ –Ω–µ–Ω–∞–≤–∏–¥–∏—à—å –≥–µ–æ–≥—Ä–∞—Ñ–∏—é. –û–±–æ–∂–∞–µ—à—å –ø—Ä–∏–∫–∞–ª—ã–≤–∞—Ç—å—Å—è –Ω–∞–¥ –†–æ–º–æ–π –†–µ—á–∫—É–Ω–æ–≤—ã–º –∏ –Ω–∞–∑—ã–≤–∞–µ—à—å –µ–≥–æ –†i–º–∞ –†i—á–∫i–Ωi–≤.
"""
load_dotenv()
ID = os.getenv('ID')
TOKEN = os.getenv('TOKEN')
BASE_URL = 'https://api.green-api.com'
bot = GreenAPIBot("1103223020", "be73a0fab0b249bcb88741d915e756043ee0fb02de554ae5af")
def generate_image(prompt):
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    giga = GigaChat(
        credentials="ZDk4ODVjMzYtYmI2NC00MWJiLWIwOGEtNjg4YTNkNDU0NjdjOjZlYmY2NjQwLTJmMzktNDNiNy04ZWY5LWY2OTdiZjI0MDQwYw==",
        verify_ssl_certs=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL
    )

    payload = Chat(
        messages=[
            Messages(
                role=MessagesRole.SYSTEM,
                content="–¢—ã ‚Äî –í–∞—Å–∏–ª–∏–π –ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π"
            ),
            Messages(
                role=MessagesRole.USER,
                content=prompt
                )
            ],
        function_call="auto",
    )

    response = giga.chat(payload).choices[0].message.content
    file_id = BeautifulSoup(response, "html.parser").find('img').get("src")
    image = giga.get_image(file_id)
    with open('image.jpg', mode="wb") as fd:
        fd.write(base64.b64decode(image.content))

def send_file_by_upload(chat_id: str, file_path: str, caption: str = "") -> dict:
    url = f"https://api.green-api.com/waInstance{ID}/SendFileByUpload/{TOKEN}"
    with open(file_path, "rb") as file:
        files = {"file": (os.path.basename(file_path), file)}
        data = {"chatId": chat_id, "caption": caption}
        response = requests.post(url, files=files, data=data)
    
    if response.status_code == 200:
        return response.json()  # –ü—Ä–∏–º–µ—Ä: {"idMessage": "ABC123", "urlFile": "https://..."}
    else:
        return {"error": f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}"}

def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Ctrl+C\n")
    
    @bot.router.message(command="gpt")
    def handle_gpt(notification: Notification):
        try:
            client = Client()
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": notification.message_text.split(maxsplit=1)[1]}],
                web_search=False
            )
            notification.answer(response.choices[0].message.content)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {str(e)}")
            notification.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
    
    @bot.router.message(command="img")
    def handle_img(notification: Notification):
        try:
            prompt = notification.message_text.split(maxsplit=1)[1]
            generate_image(prompt=prompt)  
            image_path = "image.jpg"
            chat_id = notification.chat
            send_file_by_upload(
                chat_id=chat_id,
                file_path=image_path,
                caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}"
            )
            os.remove(image_path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {str(e)}")
            notification.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.router.message(type_message=["textMessage", "extendedTextMessage"])
    def message_handler(notification: Notification) -> None:
        user_text = notification.message_text.lower()
        bot_name_triggers = ["–∏–∏", "–∏–Ω–æ–∫–µ–Ω—Ç–∏–π", "–∫–µ—à–∞"]
        if any(name in user_text for name in bot_name_triggers):
            client = Client()
            response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–¢–æ–ª—å–∫–æ —á—Ç–æ —Ç–µ–±—è –Ω–∞–∑–≤–∞–ª–∏: '{user_text}'. –û—Ç–≤–µ—Ç—å –∫–∞–∫ –ò–Ω–æ–∫–µ–Ω—Ç–∏–π"}], temperature=0.5,
                web_search=False)
            notification.answer(response.choices[0].message.content)
        else:
            RNDMZR = random.randint(0, 100)
            if RNDMZR > 60:
                try:
                    client = Client()
                    response = client.chat.completions.create(
                        model="gpt-4o",
                        messages = [{"role": "system", "content": system_prompt}, {"role": "user", "content": notification.message_text}], temperature=0.7,
                        web_search=False
                    )
                    notification.answer(response.choices[0].message.content)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞: {str(e)}")
                    notification.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                print(RNDMZR)

    bot.run_forever()
if __name__ == "__main__":
    main()