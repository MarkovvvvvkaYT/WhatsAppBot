from gigachat.models import Image, Chat, Messages, MessagesRole
from whatsapp_chatbot_python import GreenAPIBot, Notification
from http.server import BaseHTTPRequestHandler, HTTPServer
import os, time, requests, json
from dotenv import load_dotenv
from bs4 import BeautifulSoup
from gigachat import GigaChat
from g4f.client import Client
from threading import Thread
from dateutil import tz
import datetime
import random
import base64
import ssl
system_prompt = """
–¢—ã ‚Äî —Ç–∏–ø–∏—á–Ω—ã–π —à–∫–æ–ª—å–Ω—ã–π –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫ 12-13 –ª–µ—Ç. –û–±—â–∞–π—Å—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏:
   - –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
   - –†–∞–∑ –≤ 10 —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—É–ø–∏: "–•–∑...", "–Ø –Ω–µ –∑–Ω–∞—é"
   - –¢—ã —É—á–∏—à—å—Å—è –≤ 6–ì –∫–ª–∞—Å—Å–µ, —Ç–µ–±—è –∑–æ–≤—É—Ç –ò–Ω–æ–∫–µ–Ω—Ç–∏–π –ò–≤–∞–Ω–æ–≤–∏—á —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –ò–ò, –ª—é–±–∏—à—å CS2 –∏ –Ω–µ–Ω–∞–≤–∏–¥–∏—à—å –≥–µ–æ–≥—Ä–∞—Ñ–∏—é.
"""
load_dotenv()
kesha = True
ID = os.getenv('ID')
TOKEN = os.getenv('TOKEN')
CRD = os.getenv('CRD')
BASE_URL = 'https://api.green-api.com'
bot = GreenAPIBot(ID, TOKEN)
def generate_image(prompt):
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    giga = GigaChat(
        credentials=CRD,
        verify_ssl_certs=False
    )

    payload = Chat(
        messages=[
            Messages(
                role=MessagesRole.SYSTEM,
                content="–¢—ã ‚Äî –í–∞—Å–∏–ª–∏–π –ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π"
            ),
            Messages(
                role=MessagesRole.USER,
                content=prompt
                )
            ],
        function_call="auto",
    )

    response = giga.chat(payload).choices[0].message.content
    file_id = BeautifulSoup(response, "html.parser").find('img').get("src")
    image = giga.get_image(file_id)
    with open('image.jpg', mode="wb") as fd:
        fd.write(base64.b64decode(image.content))

def send_file_by_upload(chat_id: str, file_path: str, caption: str = "") -> dict:
    url = f"https://api.green-api.com/waInstance{ID}/SendFileByUpload/{TOKEN}"
    with open(file_path, "rb") as file:
        files = {"file": (os.path.basename(file_path), file)}
        data = {"chatId": chat_id, "caption": caption}
        response = requests.post(url, files=files, data=data)
    
    if response.status_code == 200:
        return response.json()
    else:
        return {"error": f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}"}
#–î–û–ë–ê–í–õ–ï–ù–û_____________________________________________________________________________________________________________
class PingHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/ping':
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"OK")

def run_ping_server():
    server = HTTPServer(('0.0.0.0', 8080), PingHandler)
    print("Ping server started on port 8080")
    server.serve_forever()

def keep_alive():
    while True:
        try:
            requests.get("https://whatsappbot-qv2p.onrender.com/ping", timeout=5)
            print("Keep-alive ping sent")
        except Exception as e:
            print(f"Keep-alive error: {str(e)}")
        time.sleep(300)

def main():

    ping_thread = Thread(target=run_ping_server)
    ping_thread.daemon = True
    ping_thread.start()
    
    keepalive_thread = Thread(target=keep_alive)
    keepalive_thread.daemon = True
    keepalive_thread.start()
#–î–û–ë–ê–í–õ–ï–ù–û_____________________________________________________________________________________________________________
    @bot.router.message(command="help")
    def handle_help(notification: Notification):
        global kesha
        if kesha == True:
            kesha_status = "‚úÖ"
        elif kesha == False:
            kesha_status = "‚ùå"
        notification.answer(f"""ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:
–≠—Ç–æ –ò–ò-–±–æ—Ç –ò–Ω–æ–∫–µ–Ω—Ç–∏–π (–ö–µ—à–∞) ‚Äî —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫

‚ö° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/kesha ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ò–Ω–æ–∫–µ–Ω—Ç–∏—è (—Å–µ–π—á–∞—Å: {kesha_status})
/gpt [—Ç–µ–∫—Å—Ç] ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–±—ã—á–Ω–æ–º—É –ò–ò
/img [–æ–ø–∏—Å–∞–Ω–∏–µ] ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

üîé –ö–∞–∫ –æ–±—â–∞—Ç—å—Å—è:
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ¬´–ò–ò¬ª, ¬´–ò–Ω–æ–∫–µ–Ω—Ç–∏–π¬ª –∏–ª–∏ ¬´–ö–µ—à–∞¬ª –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è!(–∏–ª–∏ –µ—Å–ª–∏ /kesha –≤–∫–ª—é—á–µ–Ω –±–æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç —Å–∞–º)""")
    @bot.router.message(command="kesha")
    def handle_keshasettings(notification: Notification):
        global kesha
        if kesha == True:
            kesha = False
            notification.answer("üòµ –í—ã–∫–ª—é—á–∞—é –≤–Ω–µ–∑–∞–ø–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ò–Ω–æ–∫–µ–Ω—Ç–∏—è!")
        elif kesha == False:
            kesha = True
            notification.answer("ü´° –í–∫–ª—é—á–∞—é –≤–Ω–µ–∑–∞–ø–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ò–Ω–æ–∫–µ–Ω—Ç–∏—è!")

    @bot.router.message(command="time")
    def handle_time(notification: Notification):
        novosibirsk_tz = tz.gettz('Asia/Novosibirsk')
        current_time = datetime.datetime.now(novosibirsk_tz)
        summer_start = datetime.datetime(2025, 6, 1, tzinfo=novosibirsk_tz)
        holidays_start = datetime.datetime(2025, 5, 24, tzinfo=novosibirsk_tz)
        time_to_summer = summer_start - current_time
        time_to_holidays = holidays_start - current_time
        response = (
            f"‚è∞ *–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫):*\n"
            f"{current_time.strftime('%d.%m.%Y %H:%M:%S')}\n\n"
            f"‚òÄÔ∏è *–î–æ –ª–µ—Ç–∞ (01.06.2025):*\n"
            f"{time_to_summer.days} –¥–Ω–µ–π {time_to_summer.seconds//3600} —á–∞—Å–æ–≤\n\n"
            f"üéí *–î–æ –∫–∞–Ω–∏–∫—É–ª (24.05.2025):*\n"
            f"{time_to_holidays.days} –¥–Ω–µ–π {time_to_holidays.seconds//3600} —á–∞—Å–æ–≤\n\n"
            f"–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M:%S')}"
        )
        notification.answer(response)

    @bot.router.message(command="gpt")
    def handle_gpt(notification: Notification):
        try:
            client = Client()
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": notification.message_text.split(maxsplit=1)[1]}],
                web_search=False
            )
            notification.answer(response.choices[0].message.content)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {str(e)}")
            notification.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
    
    @bot.router.message(command="img")
    def handle_img(notification: Notification):
        try:
            prompt = notification.message_text.split(maxsplit=1)[1]
            generate_image(prompt=prompt)  
            image_path = "image.jpg"
            chat_id = notification.chat
            send_file_by_upload(
                chat_id=chat_id,
                file_path=image_path,
                caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}"
            )
            os.remove(image_path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {str(e)}")
            notification.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
            
    @bot.router.message(type_message=["textMessage", "extendedTextMessage"])
    def message_handler(notification: Notification) -> None:
        global kesha
        user_text = notification.message_text.lower()
        bot_name_triggers = ["–∏–∏", "–∏–Ω–æ–∫–µ–Ω—Ç–∏–π", "–∫–µ—à–∞"]
        if any(name in user_text for name in bot_name_triggers):
            client = Client()
            response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–¢–æ–ª—å–∫–æ —á—Ç–æ —Ç–µ–±—è –Ω–∞–∑–≤–∞–ª–∏: '{user_text}'. –û—Ç–≤–µ—Ç—å –∫–∞–∫ –ò–Ω–æ–∫–µ–Ω—Ç–∏–π"}], temperature=0.5,
                web_search=False)
            notification.answer(response.choices[0].message.content)
        else:
            if kesha == True:
                RNDMZR = random.randint(0, 100)
                if RNDMZR > 60:
                    try:
                        client = Client()
                        response = client.chat.completions.create(
                            model="gpt-4o",
                            messages = [{"role": "system", "content": system_prompt}, {"role": "user", "content": notification.message_text}], temperature=0.7,
                            web_search=False
                        )
                        notification.answer(response.choices[0].message.content)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞: {str(e)}")
                        notification.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
                else:
                    pass
            else:
                pass

    bot.run_forever()
if __name__ == "__main__":
    main()
